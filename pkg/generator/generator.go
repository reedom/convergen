package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"strings"

	"github.com/reedom/convergen/v8/pkg/generator/model"
	"golang.org/x/tools/imports"
)

// Generator represents a code generator.
type Generator struct {
	code model.Code // the code to generate
}

// NewGenerator creates a new generator with the given code.
func NewGenerator(code model.Code) *Generator {
	return &Generator{
		code: code,
	}
}

// Generate generates the code into a file with the given path.
// It returns the generated code as a byte slice.
func (g *Generator) Generate(outPath string, output, dryRun bool) ([]byte, error) {
	content, err := g.generateContent()
	if err != nil {
		return nil, err
	}

	optimized, err := imports.Process(outPath, content, nil)
	if err != nil {
		if output {
			fmt.Println(string(content))
		}
		return nil, fmt.Errorf("error on optimizing imports of the generated code.\n%w", err)
	}

	formatted, err := format.Source(optimized)
	if err != nil {
		if output {
			fmt.Println(string(content))
		}
		return nil, fmt.Errorf("error on formatting the generated code.\n%w", err)
	}

	if dryRun {
		if output {
			fmt.Println(string(formatted))
		}
		return formatted, nil
	}

	err = os.WriteFile(outPath, formatted, 0644)
	if err != nil {
		return nil, fmt.Errorf("error on writing to the file.\n%w", err)
	}

	return formatted, nil
}

// generateContent generates the entire code with the given information.
func (g *Generator) generateContent() (content []byte, err error) {
	code := g.code.BaseCode
	for _, block := range g.code.FunctionBlocks {
		var sb strings.Builder
		for _, f := range block.Functions {
			_, err = sb.WriteString(g.FuncToString(f))
			if err != nil {
				return
			}
		}
		code = strings.Replace(code, block.Marker, sb.String(), 1)
	}

	buf := bytes.Buffer{}
	_, err = buf.WriteString("// Code generated by github.com/reedom/convergen\n// DO NOT EDIT.\n\n")
	if err == nil {
		_, err = buf.WriteString(code)
	}
	if err != nil {
		return
	}

	return buf.Bytes(), nil
}
